 isInBound2() method

Test Case 1:
Input:
•	Input coordinates: {row: 3, column: 3}.
•	GRID_SIZE is assumed to be 10.
Expected Output:
• Returns 1
Description: Verifies that the function correctly identifies coordinates within the grid bounds.

Test Case 2:
Input:
•	Input coordinates: {row: -1, column: 5}.
•	GRID_SIZE is assumed to be 10.
Expected Output:
•	Returns 0
Description: Verifies that the function correctly identifies when the row coordinate is out of bounds( less than 0).

Test Case 3:
Input:
•	Input coordinates: {row: 5, column: 10}.
•	GRID_SIZE is assumed to be 10.
Expected Output:
•	Returns 0
Description: Verifies that the function correctly identifies when the column coordinate is greater than or equal to GRID_SIZE (out of bounds).




foundHitHorizontal() method:
Test Case 1:
Input:
•	Coordinates: {row: 2, column: 3}.
•	Ship size: 3.
•	currentPlayer's hitsAndMissesGrid has a ship placed at (2, 3), (2, 4), (2, 5).
•	Difficulty level: EASY.
Expected Output:
•	Returns 1
Description: Verifies that the function correctly detects a hit when the target coordinates are part of an opponent's ship in EASY mode and the horizontal cells within the bounds.

Test Case 2:
Input:
•	Coordinates: {row: 1, column: 1}.
•	Ship size: 4.
•	currentPlayer's hitsAndMissesGrid has a ship placed at (1, 1), (1, 2), (1, 3), (1, 4).
•	Difficulty level: EASY.
Expected Output:
•	 Returns 0
Description: Verifies that the function returns 0 when no hit is detected after checking the full horizontal length of the ship.

Test Case 3:
Input:
•	Coordinates: {row: 3, column: 5}.
•	Ship size: 3.
•	currentPlayer's hitsAndMissesGrid has no ships, but a miss ('o') is marked at (3, 5), (3, 6), and (3, 7).
•	 Difficulty level: EASY.
Expected Output:
•	Returns 1
Description: Verifies that the function returns 1 when a miss is detected within the range of the target coordinates in EASY mode.

Test Case 4:
Input:
•	Coordinates: {row: 7, column: 7}.
•	Ship size: 2.
•	currentPlayer's hitsAndMissesGrid has a ship placed at (7, 7) and (7, 8).
•	Difficulty level: EASY.
Expected Output:
•	Returns 1
Description: Verifies that the function correctly detects a hit in the target horizontal cells within bounds in EASY mode.

Test Case 5:
Input:
•	Coordinates: {row: 5, column: 2}.
•	Ship size: 5.
•	currentPlayer's hitsAndMissesGrid has no ships, but misses are marked ('o') at (5, 2) to (5, 6).
•	Difficulty level: HARD.
Expected Output:
•	Returns 0 
Description: Verifies that the function returns 0 when a miss is detected within the range of the target coordinates in hard mode, where misses do not count as hits.

Test Case 6:
Input:
•	Coordinates: {row: 3, column: 4}.
•	Ship size: 2.
•	currentPlayer's hitsAndMissesGrid has a ship placed at (3, 4) and (3, 5).
•	Difficulty level: HARD.
Expected Output:
•	Returns 1
Description: Verifies that the function correctly detects a hit within the target horizontal cells in HARD mode.


foundHitVertical() method:

Test Case 1:
Input:
•	Coordinates: {row: 2, column: 3}.
•	Ship size: 3.
•	currentPlayer's hitsAndMissesGrid has a ship placed at (2, 3), (3, 3), (4, 3).
•	Difficulty level: EASY.
Expected Output:
•	Returns 1.
Description: Verifies that the function correctly detects a hit when the target coordinates are part of an opponent's ship in EASY mode, and the vertical cells within the bounds.


Test Case 2 
Input:
•	Coordinates: {row: 1, column: 1}.
•	Ship size: 4.
•	currentPlayer's hitsAndMissesGrid has a ship placed at (1, 1), (2, 1), (3, 1), (4, 1).
•	Difficulty level: EASY.
Expected Output:
•	Returns 0.
Description: Verifies that the function returns 0 when no hit is detected after checking the full vertical length of the ship.

Test Case 3 
Input:
•	Coordinates: {row: 3, column: 5}.
•	Ship size: 3.
•	currentPlayer's hitsAndMissesGrid has no ships, but a miss ('o') is marked at (3, 5), (4, 5), and (5, 5).
•	Difficulty level: EASY.
Expected Output:
•	Returns 1.
Description: Verifies that the function returns 1 when a miss is detected within the range of the target coordinates in EASY mode.

Test Case 4 
Input:
•	Coordinates: {row: 7, column: 7}.
•	Ship size: 2.
•	currentPlayer's hitsAndMissesGrid has a ship placed at (7, 7) and (8, 7).Difficulty 
•	level: EASY.
Expected Output:
•	Returns 1.
Description: Verifies that the function correctly detects a hit in the target vertical cells within bounds in EASY mode.

Test Case 5:
•	Input:
•	Coordinates: {row: 5, column: 2}.
•	Ship size: 5.
•	currentPlayer's hitsAndMissesGrid has no ships, but misses are marked ('o') from (5, 2) to (5, 6).
•	Difficulty level: HARD.
Expected Output:
•	Returns 0.
Description: Verifies that the function returns 0 when a miss is detected within the range of the target coordinates in HARD mode, where misses do not count as hits.

Test Case 6 
Input:
•	Coordinates: {row: 3, column: 4}.
•	Ship size: 2.
•	currentPlayer's hitsAndMissesGrid has a ship placed at (3, 4) and (4, 4).
•	Difficulty level: HARD.
Expected Output:
•	Returns 1.
Description: Verifies that the function correctly detects a hit within the target vertical cells in HARD mode.





calculateProbabilityFunction():

Test Case 1 (Basic Probability Calculation):
Input:
•	currentPlayer's probGrid is initialized with zeros.
•	opposingPlayer's ships include a ship of size 3 at positions (2, 2), (2, 3), (2, 4) which is not fallen
•	currentPlayer's probGrid has no known hits or misses at the given coordinates.
Expected Output:
•	The probGrid of currentPlayer is updated to reflect higher probabilities at the positions where the ship could be placed 
Description:
Verifies that the function correctly updates the probability grid when there is a valid placement for a ship in the grid.


Test Case 2 (Ship Already Fallen - No Probability Update):
Input:
•	currentPlayer's probGrid is initialized with zeros.
•	opposingPlayer's ships include a ship of size 3 at positions (2, 2), (2, 3), (2, 4) which is already fallen .
•	currentPlayer's probGrid has no known hits or misses at the given coordinates.
Expected Output:
•	No changes are made to the probGrid since the ship is already fallen 

Description:
•	Verifies that no probability update occurs for fallen ships.


Test Case 3 (Ship Placement Out of Bounds - No Update):
Input:
•	currentPlayer's probGrid is initialized with zeros.
•	opposingPlayer's ships include a ship of size 5 placed at positions (7, 7), (7, 8), (7, 9), (7, 10), (7, 11).
•	currentPlayer's probGrid has no known hits or misses at the given coordinates.
Expected Output:
•	No changes are made to the probGrid since the ship cannot fit in any horizontal or vertical position in the grid (out of bounds).
Description:
Verifies that the function handles placements that are out of bounds and does not update the probability grid for such positions.


Test Case 4 (Hit Detected - Probability Decreases):
Input:
•	currentPlayer's probGrid is initialized with zeros.
•	opposingPlayer's ships include a ship of size 2 at positions (5, 5), (5, 6).
•	currentPlayer's hitsAndMissesGrid has a hit at (5, 5).
Expected Output:
•	The probGrid of currentPlayer is updated with a lower probability at position (5, 5), reflecting the known hit.
Description:
Verifies that the function decreases the probability in the grid when a hit has already occurred at a given position.


Test Case 5 (Miss Detected - Probability Increases):
Input:
•	currentPlayer's probGrid is initialized with zeros.
•	opposingPlayer's ships include a ship of size 3 at positions (2, 2), (2, 3), (2, 4).
•	currentPlayer's hitsAndMissesGrid has a miss ('o') at (2, 2), (2, 3).
Expected Output:
•	The probGrid of currentPlayer is updated to reflect higher probabilities at the positions where no ship is placed due to the detected miss in EASY mode.
Description:
Verifies that the function correctly adjusts the probability grid when a miss is detected in EASY mode.



Test Case 5 (Multiple Ship Placements - Mixed Updates):
    Input:
        • currentPlayer's probGrid is initialized with zeros.
        • opposingPlayer's ships include two ships: one of size 3 placed at positions (2, 2), (2, 3), (2, 4), and another of size 2 placed at (4, 4), (4, 5).
        • currentPlayer's probGrid has no known hits or misses at the given coordinates.
    Expected Output:
        • The probGrid of currentPlayer is updated to reflect the probability of placing ships at    various positions, considering both horizontal and vertical potential placements for both ships.
    Description: Verifies that the function correctly calculates the probability for multiple ships on the grid and updates the probGrid accordingly.


Test Case 6 (Ship Cannot Fit Vertically or Horizontally - No Probability Update):
Input:
        • currentPlayer's probGrid is initialized with zeros.
        • opposingPlayer's ships include a ship of size 4 placed at positions (7, 7), (7, 8), (7, 9), (7, 10)
        • currentPlayer's probGrid has no known hits or misses at the given coordinates.
Expected Output:
        • No updates to the probGrid as the ship cannot fit either horizontally or vertically within the grid bounds.
Description:Verifies that the probability grid is not updated when a ship cannot fit within the bounds.


Test Case 1 (Basic Calculation):
Input:
•	grid is a 5x5 grid with values initialized as follows:
1 2 3 4 5  
6 7 8 9 10  
11 12 13 14 15  
16 17 18 19 20  
21 22 23 24 25  
•	i = 1, j = 1 (starting position of the 2x2 grid).
Expected Output:
•	The sum of the values in the 2x2 grid starting at (1, 1) is 7 + 8 + 12 + 13 = 40.
Description: Verifies that the function correctly calculates the sum of a 2x2 grid starting at the given position.




Test Case 2 (Grid Edge Case - Negative Indices):
Input:
•	grid is a 5x5 grid with values initialized as shown in the previous test case.
•	i = -1, j = 1 (starting position of the 2x2 grid is out of bounds).
Expected Output:
•	The sum is calculated only for valid positions within the grid. The valid positions are (0, 1) and (0, 2).
•	The sum of those values is 2 + 3 = 5.
Description: Verifies that the function handles invalid starting indices correctly, calculating the sum only for positions within bounds.


Test Case 3 (Grid Edge Case - Right Boundaries):
Input:
•	grid is a 5x5 grid with values initialized as shown earlier.
•	i = 3, j = 3 (starting position near the bottom-right corner).
Expected Output:
•	The sum of the values in the 2x2 grid starting at (3, 3) is 19 + 20 + 24 + 25 = 88.
Description: Verifies that the function correctly calculates the sum for positions near the edge of the grid.


Test Case 4 (Full Grid Calculation - Top Left Corner):
Input:
•	grid is a 5x5 grid with values initialized as shown earlier.
•	i = 0, j = 0 (starting position at the top-left corner of the grid).
Expected Output:
•	The sum of the values in the 2x2 grid starting at (0, 0) is 1 + 2 + 6 + 7 = 16.
Description: Verifies that the function calculates the sum for the grid's top-left corner correctly.

Test Case 5 (All Zeros in Grid):
Input:
•	grid is a 5x5 grid with all values set to 0.
•	i = 2, j = 2 (starting position somewhere in the middle of the grid).
Expected Output:
•	The sum of the values in the 2x2 grid starting at (2, 2) is 0 + 0 + 0 + 0 = 0.
Description: Verifies that the function correctly returns a sum of 0 when the grid consists entirely of zeros.






Test Case 6 (Grid with Negative Values):
Input:
•	grid is a 5x5 grid with values same as test case 1 but negative
•	i = 1, j = 1 (starting position of the 2x2 grid).
Expected Output:
•	The sum of the values in the 2x2 grid starting at (1, 1) is -7 + -8 + -12 + -13 = -40.
Description: Verifies that the function correctly handles and sums negative values in the grid.



maxSumCoordinates() method:

test Case 1: Simple Grid (No Equal Maximum Sums)
Input:
int grid[4][4] = {
    {1, 2, 3, 4},
    {5, 6, 7, 8},
    {9, 10, 11, 12},
    {13, 14, 15, 16}
};

Coord coords[MAX_COORDS];
Expected Output:
count = 1;
Description:
The highest sum is found in the 2x2 sub-grid starting at (2, 2). The maximum sum of 54 occurs only once for the 2x2 sub-grid starting at (2, 2). There are no other sub-grids with the same sum. Therefore, the function should return a count of 1, as only one sub-grid has the maximum sum.

Test Case 2: Multiple Sub-Grids with Same Maximum Sum
Input:
int grid[4][4] = {
    {1, 2, 3, 4},
    {5, 6, 7, 8},
    {9, 6, 7, 8},
    {1, 2, 3, 4}
};

Coord coords[MAX_COORDS];
Expected Output:
count = 2;
Description:
Two 2x2 sub-grids have the same maximum sum of 28: one starting at (1, 1) and another at (2, 1).

Test Case 3: All Zeros Grid (Maximum Sum = 0)
Input:
int grid[4][4] = {
    {0, 0, 0, 0},
    {0, 0, 0, 0},
    {0, 0, 0, 0},
    {0, 0, 0, 0}
};

Coord coords[MAX_COORDS];
Expected Output:
count = 16;
Description:
All 2x2 sub-grids have the same sum of 0 because the grid is filled with zeros. Therefore, there are 16 possible coordinates.


Test Case 4: All Equal Sums
Input:
int grid[5][5] = {
    {1, 1, 1, 1, 1},
    {1, 1, 1, 1, 1},
    {1, 1, 1, 1, 1},
    {1, 1, 1, 1, 1},
    {1, 1, 1, 1, 1}
};

Coord coords[MAX_COORDS];
Expected Output:
count = 16;
Description:
•	All 2x2 sub-grids have the same sum of 4, so there are 16 possible coordinates with the maximum sum.




Test Case 5: All Negative Numbers, Multiple Sub-Grids
Input:
int grid[4][4] = {
    {-1, -1, -1, -1},
    {-1, -1, -1, -1},
    {-1, -1, -1, -1},
    {-1, -1, -1, -1}
};

Coord coords[MAX_COORDS];
Expected Output:
count = 16;
Description: All 2x2 sub-grids have the same sum of -4. The function should return all 16 possible coordinates.


Test Case 1: Simple Grid (No Equal Maximum Sums)
Input:
int probGrid[4][4] = {
    {1, 2, 3, 4},
    {5, 6, 7, 8},
    {9, 10, 11, 12},
    {13, 14, 15, 16}
};
Expected Output:
•	count = 1
(2,2)
Description: The maximum sum of 54 occurs in the 2x2 sub-grid starting at (2, 2).

Test Case 2: Multiple Sub-Grids with Same Maximum Sum
Input:
int probGrid[4][4] = {
    {1, 2, 3, 4},
    {5, 6, 7, 8},
    {9, 6, 7, 8},
    {1, 2, 3, 4}
};

Expected Output:
•	count = 2
•(1,1)
(2,1)
Description: Two 2x2 sub-grids have the same maximum sum of 28: one starting at (1, 1) and another at (2, 1).



Test Case 3: All Zeros Grid (Maximum Sum = 0)
Input:
int probGrid[4][4] = {
    {0, 0, 0, 0},
    {0, 0, 0, 0},
    {0, 0, 0, 0},
    {0, 0, 0, 0}
};


Expected Output:
•	count = 16
• (0,0)
• (0,1)
•	(0,2)
•	(continue for all combinations of valid sub-grid starts)
Description: All 2x2 sub-grids have the same sum of 0 because the grid is filled with zeros. Therefore, all 16 sub-grids have the maximum sum.


Test Case 4: All Equal Sums
Input:
int probGrid[5][5] = {
    {1, 1, 1, 1, 1},
    {1, 1, 1, 1, 1},
    {1, 1, 1, 1, 1},
    {1, 1, 1, 1, 1},
    {1, 1, 1, 1, 1}
};


Expected Output:
•	count = 16
  (0,0)
• (0,1)
•	(0,2)
•	(continue for all valid sub-grid starting positions)
Description: All 2x2 sub-grids have the same sum of 4, so there are 16 possible coordinates with the maximum sum.


Test Case 5: All Negative Numbers, Multiple Sub-Grids
Input:
int probGrid[4][4] = {
    {-1, -1, -1, -1},
    {-1, -1, -1, -1},
    {-1, -1, -1, -1},
    {-1, -1, -1, -1}
};
Expected Output:
•	count = 16
•	(0,0)
• (0,1)
•	(0,2)
•	(continue for all valid sub-grid starts)
Description: All 2x2 sub-grids have the same sum of -4. The function should return all 16 possible coordinates.